import json
import telebot
from telebot import *
import sqlite3
from gigachat import GigaChat
import requests
import datetime


conn = sqlite3.connect('pro3.db', check_same_thread=False)
cursor = conn.cursor()

def db_table_val(user_id: int , user_age: int,  user_height: int, user_sex: str, user_weight: float):
  cursor.execute('INSERT INTO users (user_id, user_height, user_age, user_sex, user_weight) VALUES (?, ?, ?, ?, ?)', (user_id, user_height, user_age, user_sex, user_weight))
  conn.commit()

def counting_users_cal_after_train( user_id: int ,date: str, user_train_cal: int):
  cursor.execute('INSERT INTO user_training_cal (user_id, date, user_train_cal) VALUES (?, ?, ?)', (user_id, date, user_train_cal))
  conn.commit()




token = '7239777184:AAEJCJcJx4_c9fuj9pIFKT3RlofrcnVV9Nk'

bot = telebot.TeleBot(token)


def message_input_step(message):
  global height  # объявляем глобальную переменную
  height = int(message.text)
  ye = bot.send_message(message.chat.id, text='Введи свой возраст')
  bot.register_next_step_handler(ye, choise_of_age)


def choise_of_age(message):
  global age
  age = int(message.text)
  btn1 = types.KeyboardButton("Мужчина")
  btn2 = types.KeyboardButton("Женщина")
  markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
  markup.add(btn1, btn2)
  se = bot.send_message(message.chat.id, text='Выбери свой пол:', reply_markup=markup)
  bot.register_next_step_handler(se, choise_of_sex)


def choise_of_sex(message):
  global sex
  sex = message.text
  ma = bot.send_message(message.chat.id, text='Введи свой вес:', reply_markup=telebot.types.ReplyKeyboardRemove())
  bot.register_next_step_handler(ma, choise_of_mass)


def choise_of_mass(message):
  global weight
  weight = float(message.text)
  db_table_val(user_id=message.from_user.id, user_height=height, user_age=age, user_sex=sex, user_weight=weight)
  count_imt(message)
def count_imt(message):
  btn = 'Рассчитать ИМТ'
  markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
  markup.add(btn)
  bot.send_message(message.chat.id, text='Далее стоит рассичтать ваш имт. ...', reply_markup=markup)
  global imt
  global imt_using_words
  imt = round(weight / ((height / 100) ** 2), 3)
  imt_using_words = str()
  if round(imt) < 15:
    imt_using_words = 'сильно меньше нормы'
  if round(imt) in range(15, 18):
    imt_using_words = 'Недостаточная масса '
  if round(imt) in range(18, 25):
    imt_using_words = 'Норма'
  if round(imt) in range(25, 30):
    imt_using_words = 'Предожирение'
  if round(imt) in range(30, 35):
    imt_using_words = 'Ожирение'
  global cal
  cal = 0
  if sex == 'Мужчина':
    cal = (10 * weight) + (6.25 * height) - (5 * age) + 5
  if sex == 'Женщина':
    cal = (10 * weight) + (6.25 * height) - (5 * age) - 161
  next_step(message)
def next_step(message):
  markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
  btn1 = 'Сброс веса'
  btn2 = 'Удержание массы'
  btn3 = 'Набор массы'
  markup.add(btn1, btn2, btn3)
  po = bot.send_message(message.chat.id, text = '{}, твой вес: {}, твой рост: {}, твой индекс массы тела:{}, и твой вес - это {}. Сечас ты сможешь выбрать свою цель, чтобы я смог помочь тебе с твоим персональным планом питания:'.format(message.from_user.first_name, weight, height, imt, imt_using_words), reply_markup= markup)
  bot.register_next_step_handler(po, pohelan)

def pohelan(message):
  markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
  btn1 = 'Подсказка по рецепту'
  btn2 = 'Помощь с треней'
  markup1.add(btn1, btn2)
  global aim
  aim = message.text
  if aim == 'Сброс веса':
    bot.send_message(message.chat.id, text = 'Ваши Б/Ж/У должны быть в соотношении 35/15/50, и в день вы должны потреблять {} килокалорий'.format(cal - cal/5), reply_markup= telebot.types.ReplyKeyboardRemove())
  if aim == 'Удержание массы':
    bot.send_message(message.chat.id, text = 'Ваши Б/Ж/У должны быть в соотношении 30/20-25/50-55, и в день вы должны потреблять {} килокалорий'.format(cal), reply_markup= telebot.types.ReplyKeyboardRemove())
  if aim == 'Набор массы':
    bot.send_message(message.chat.id, text = 'Ваши Б/Ж/У должны быть в соотношении 30/20-25/50-55, и в день вы должны потреблять {} килокалорий'.format(cal + 450), reply_markup= telebot.types.ReplyKeyboardRemove())
  mes = bot.send_message(message.chat.id, text = 'Для того, чтобы тебе осуществить {}, тебе стоит наладить твоё питание и тренировки.  Этот мегабот тебе с этим поможет)) Сейчас сюда придут сообщения с твоими недельными планами тренировок и питания,которые ты так-же сможешь найти в закреплённых сообщениях'.format(message.text))
 # with GigaChat(
  #      credentials='YzY3ZWQ3MmMtN2ZlOC00ZGQzLWE5OGEtOTBjMjdlMGZjMDJiOjQ4NTI4MDM1LTliNjgtNGIwOS1hZjk3LTFkNjU1MDk2NDM4Ng==',
  #      verify_ssl_certs=False) as giga:
 #   global plan_train, plan_pit
 #   plan_pit= giga.chat(
  #  f"Придумай индивидуальный план разнообразного питания на неделю для {sex},чей рост равен {height}, возраст равен {age}, имт равен {imt} и цель {aim}")
 #   plan_train = giga.chat(
 #       f"Придумай индивидуальный план тренировок на неделю для {sex}, чей рост равен {height}, возраст равен {age},  чей имт равен {imt} , чья цель {aim} и чей индивидуальный план питания {plan_pit.choices[0].message.content}")
  #plan_pit = bot.send_message(message.chat.id, text = plan_pit.choices[0].message.content, reply_markup=telebot.types.ReplyKeyboardRemove()).message_id
#  plan_train = bot.send_message(message.chat.id, text = plan_train.choices[0].message.content, reply_markup=telebot.types.ReplyKeyboardRemove()).message_id
 # bot.pin_chat_message(chat_id=message.chat.id, message_id= plan_pit)
#  bot.pin_chat_message(chat_id=message.chat.id, message_id= plan_train)
  global alfamarkup
  alfamarkup = types.ReplyKeyboardMarkup(resize_keyboard=True)
  btn1 = 'Добавить тренировки'
  btn2 = 'Ввести еду за день'
  alfamarkup.add(btn1, btn2)
  mes = bot.send_message(message.chat.id,
                   text='Выданные планы питания и тренировок являются лишь рекоменданиями, которые ты можешь выполнять по желанию. Теперь ты можешь вводить продукты, которые ты сегодня употребил и тренировки, которые ты сегодня прошёл, а в конце дня ты будешь получать отчёт по твоим Б/Ж/У за день и затраченным калориям',
                   reply_markup=alfamarkup)
  bot.register_next_step_handler(mes, account)


def intensiv(message):
  global intensivity

  if message.text == 'Неинтенсивная тренировка':
    intensivity = 2.5
  if message.text == 'Умеренная интенсивность':
    intensivity = 3
  if message.text == 'Интенсивная тренировка':
    intensivity = 3.5

  mes = bot.send_message(message.chat.id, text='Хорошо, а теперь введи,сколько минут длилась твоя тренировка:',
                   reply_markup=telebot.types.ReplyKeyboardRemove())
  bot.register_next_step_handler(mes, ttime)

def ttime(message):
  time = int(message.text)
  tren_cal = round((weight * intensivity * time / 24), 3)
  mes = bot.send_message(message.chat.id, text=f'Прекрасно! Ты за тренировку сжёг {tren_cal} килокалорий. Так держать!!',
                   reply_markup=alfamarkup)
  bot.register_next_step_handler(mes, account)
  counting_users_cal_after_train(user_id=message.from_user.id, date = datetime.datetime.now().strftime('%Y-%m-%d') ,user_train_cal = tren_cal )
  global col_cal_tren, data, itog_cal
  cursor.execute("SELECT SUM(user_train_cal) FROM user_training_cal WHERE date = ? AND user_id = ?",
                 (datetime.datetime.now().strftime('%Y-%m-%d'), message.from_user.id))
  result = cursor.fetchone()
  col_cal_tren = result[0]
  bot.send_message(message.chat.id, text = f'{message.from_user.first_name}, за сегодня ты сжёг {col_cal_tren} килокалорий. Так держать!!')


logo = open('logo.jpg', 'rb')

@bot.message_handler(commands = ['start'])
def start(message):
  markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
  bot.send_photo(message.chat.id, logo)
  btn1 = types.KeyboardButton("Регистрация")
  btn2 = types.KeyboardButton("Вход")
  markup.add(btn1, btn2)
  ans = bot.send_message(message.chat.id, 'Привет, {}! Бот PROпиташка поможет тебе вести индивидуальный расчет твоего питания и активности, опираясь на твои персональные параметры)'.format(message.from_user.first_name), reply_markup=markup)
  bot.register_next_step_handler(ans, func)

def work_with_food(message):
  name_a = message.text
  with open('products.json') as f:
    file_content = f.read()
    foods = json.loads(file_content)
    for i in range(len(foods)) :
      if foods[i]["name"] == name_a:
        bot.send_message(message.chat.id, text = foods[i]["bgu"])


def func(message):
  if (message.text == 'Регистрация'):
    hei = bot.send_message(message.chat.id, text='Введи свой рост в сантиметрах:',
                           reply_markup=telebot.types.ReplyKeyboardRemove())
    bot.register_next_step_handler(hei, message_input_step)


  if message.text ==  'Вход':
    global height, age, sex, weight
    cursor.execute(f"SELECT user_height, user_age, user_sex, user_weight FROM users WHERE user_id={message.from_user.id}")
    height, age,sex, weight = cursor.fetchone()
    count_imt(message)

@bot.message_handler(content_types=['text'])
def account(message):
  if message.text == 'Добавить тренировки':
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = 'Неинтенсивная тренировка'
    btn2 = 'Умеренная интенсивность'
    btn3 = 'Интенсивная тренировка'
    markup.add(btn1, btn2, btn3)
    mes = bot.send_message(message.chat.id, text = 'Выбери интенсивность своей тренировки:', reply_markup= markup)
    bot.register_next_step_handler(mes, intensiv)
  if message.text == 'Ввести еду за день':
    mes = bot.send_message(message.chat.id, text = 'Введи название блюда, которое ты сегодня ел:')
    bot.register_next_step_handler(mes, work_with_food)

bot.polling(none_stop=True)
