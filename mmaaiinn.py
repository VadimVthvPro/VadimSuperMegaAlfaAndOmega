import sqlite3

from aiogram.filters import CommandStart
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
import aiosqlite
import base64
from dotenv import load_dotenv
import os
import keyboards as kb
import asyncio
import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from gigachat import GigaChat
from aiogram.filters import Command



load_dotenv()
TOKEN = os.getenv('TOKEN')

def decode_credentials(encoded_str):
    decoded_bytes = base64.b64decode(encoded_str)
    decoded_str = decoded_bytes.decode('utf-8')
    client_id, client_secret = decoded_str.split(':')
    return client_id, client_secret


encoded_credentials = os.getenv('GIGA')
client_id, client_secret = decode_credentials(encoded_credentials)
GIGA = {
    'client_id': client_id,
    'client_secret': client_secret
}



credentials_str = f"{GIGA['client_id']}:{GIGA['client_secret']}"
credentials_base64 = base64.b64encode(credentials_str.encode("utf-8")).decode("utf-8")

bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


conn = sqlite3.connect('pro3.db', check_same_thread=False)
cursor = conn.cursor()


class REG(StatesGroup):
    height = State()
    age = State()
    sex = State()
    want = State()
    weight = State()
    ais = State()


async def db_table_val(user_id: int, user_age: int, user_sex: str, user_weight: float, date: str, user_aim: str,
                       imt: float, imt_str: str, cal: float, user_height: int):
    async with aiosqlite.connect('pro3.db') as conn:
        await conn.execute(
            'INSERT INTO users (user_id, user_age, user_sex, user_weight, date, user_aim, imt, imt_str, cal, user_height) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            (user_id, user_age, user_sex, user_weight, date, user_aim, imt, imt_str, cal, user_height)
        )
        await conn.commit()


async def get_user_data(user_id: int, date: str):
    async with aiosqlite.connect('pro3.db') as conn:
        cursor = await conn.execute(
            "SELECT user_age, user_height, user_sex, user_weight, user_aim, imt, imt_str, cal FROM users WHERE user_id = ? AND date = ?",
            (user_id, date)
        )
        return await cursor.fetchone()


@dp.message(CommandStart())
async def start(message: Message):
    await message.answer_photo(
        FSInputFile(path='new_logo.jpg'),
        caption=f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –ë–æ—Ç PRO–ø–∏—Ç–∞—à–∫–∞ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤–µ—Å—Ç–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ç–≤–æ–µ–≥–æ –ø–∏—Ç–∞–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.',
        reply_markup=kb.startMenu
    )


@dp.message(F.text == "–í—Ö–æ–¥")
async def entrance(message: Message, state: FSMContext):
    user_data = await get_user_data(message.from_user.id, datetime.datetime.now().strftime('%Y-%m-%d'))
    if user_data:
        height, weight, imt, imt_using_words = user_data[1], user_data[3], user_data[5], user_data[6]
        await state.set_state(REG.ais)
        await bot.send_message(
            message.chat.id,
            text=f'{message.from_user.first_name}, —Ç–≤–æ–π –≤–µ—Å: {weight}, —Ç–≤–æ–π —Ä–æ—Å—Ç: {height}, —Ç–≤–æ–π –ò–ú–¢: {imt}, –∏ —Ç–≤–æ–π –≤–µ—Å - —ç—Ç–æ {imt_using_words}.'
        )
        plan_pit, plan_train = await generate_nutrition_plan(message, bot)
        await state.set_state(REG.ais)

        try:
            if plan_pit and plan_train:
                # –†–∞–∑–¥–µ–ª—è–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
                for part in split_message(plan_pit):
                    await bot.send_message(message.chat.id, text=part)
                for part in split_message(plan_train):
                    await bot.send_message(message.chat.id, text=part)
                await message.answer(
                    text='–í—ã–¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —è–≤–ª—è—é—Ç—Å—è –ª–∏—à—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞–Ω–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ –∂–µ–ª–∞–Ω–∏—é. ',
                    reply_markup=kb.entranse)

            else:
                await bot.send_message(message.chat.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {str(e)}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {e}"
    else:
        await bot.send_message(message.chat.id, text='–¢–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –Ω–µ—Ç üôÅ –î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', reply_markup=kb.reRig)


@dp.message(F.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def registration(message: Message, state: FSMContext):
    await db_table_val(
        user_id=message.from_user.id,
        date=datetime.datetime.now().strftime('%Y-%m-%d'),
        user_aim="",
        imt=0.0,
        imt_str="",
        cal=0.0,
        user_sex="",
        user_height=0,
        user_weight=0.0,
        user_age=0
    )
    await state.set_state(REG.height)
    await bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:')


@dp.message(REG.height)
async def height(message: Message, state: FSMContext):
    await state.update_data(height=int(message.text))
    await state.set_state(REG.age)
    await message.answer('–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:')

@dp.message(REG.age)
async def age(message: Message, state: FSMContext):
    await state.update_data(age=int(message.text))
    await state.set_state(REG.sex)
    await message.answer('–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:', reply_markup=kb.sex)

@dp.message(REG.sex)
async def sex(message: Message, state: FSMContext):
    await state.update_data(sex=message.text)
    await state.set_state(REG.want)
    await message.answer('–í—ã–±–µ—Ä–∏, –∫–∞–∫ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å—Å—è', reply_markup=kb.want)

@dp.message(REG.want)
async def want(message: Message, state: FSMContext):
    await state.update_data(want=message.text)
    await state.set_state(REG.weight)
    await message.answer('–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö', reply_markup=types.ReplyKeyboardRemove())

@dp.message(REG.weight)
async def wei(message: Message, state: FSMContext):
    await state.update_data(weight=message.text)
    data = await state.get_data()
    height, sex, age, weight, aim = data['height'], data['sex'], data['age'], data['weight'], data['want']
    await state.set_state(REG.ais)


    if "," in weight:
        we1 = message.text.split(",")
        weight = int(we1[0]) + int(we1[1]) / 10 ** len(we1[1])
    else:
        weight = float(message.text)


    height, sex, age = int(height), str(sex), int(age)
    imt = round(weight / ((height / 100) ** 2), 3)
    imt_using_words = calculate_imt_description(imt)
    cal = calculate_calories(sex, weight, height, age)


    cursor.execute(
        f"UPDATE users SET user_weight = ?, imt = ?, imt_str = ?, cal = ?, user_sex = ?, user_age = ?, user_height = ?, user_aim = ? WHERE user_id = ? AND date = ?",
        (weight, imt, imt_using_words, cal, sex, age, height, aim, message.from_user.id, datetime.datetime.now().strftime('%Y-%m-%d'))
    )
    conn.commit()
    await state.set_state(REG.ais)

    try:
        await bot.send_message(
            message.chat.id,
            text=f'{message.from_user.first_name}, —Ç–≤–æ–π –≤–µ—Å: {weight}, —Ç–≤–æ–π —Ä–æ—Å—Ç: {height}, —Ç–≤–æ–π –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞: {imt}, –∏ —Ç–≤–æ–π –≤–µ—Å - —ç—Ç–æ {imt_using_words}.'
        )
        plan_pit, plan_train = await generate_nutrition_plan(message, bot)
        if plan_pit and plan_train:
            # –†–∞–∑–¥–µ–ª—è–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
            for part in split_message(plan_pit):
                await bot.send_message(message.chat.id, text=part)
            for part in split_message(plan_train):
                await bot.send_message(message.chat.id, text=part)
            await message.answer(
                text='–í—ã–¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —è–≤–ª—è—é—Ç—Å—è –ª–∏—à—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞–Ω–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ –∂–µ–ª–∞–Ω–∏—é. ',
                reply_markup=kb.entranse)

        else:
            await bot.send_message(message.chat.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {str(e)}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {e}"


def calculate_imt_description(imt):
    if round(imt) < 15:
        return '—Å–∏–ª—å–Ω–æ –º–µ–Ω—å—à–µ –Ω–æ—Ä–º—ã'
    elif round(imt) in range(14, 18):
        return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞'
    elif round(imt) in range(18, 25):
        return '–ù–æ—Ä–º–∞'
    elif round(imt) in range(25, 30):
        return '–ü—Ä–µ–¥–æ–∂–∏—Ä–µ–Ω–∏–µ'
    else:
        return '–û–∂–∏—Ä–µ–Ω–∏–µ'

def calculate_calories(sex, weight, height, age):
    if sex == '–ú—É–∂—á–∏–Ω–∞':
        return (10 * weight) + (6.25 * height) - (5 * age) + 5
    elif sex == '–ñ–µ–Ω—â–∏–Ω–∞':
        return (10 * weight) + (6.25 * height) - (5 * age) - 161
    return 0

def split_message(text, max_length=4096):
    """–†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –Ω–µ –±–æ–ª–µ–µ max_length —Å–∏–º–≤–æ–ª–æ–≤."""
    return [text[i:i + max_length] for i in range(0, len(text), max_length)]




async def generate_nutrition_plan(message, bot):
    try:
        cursor.execute(
            "SELECT user_aim, cal, user_sex, user_age, imt, user_weight, user_height FROM users WHERE date = ? AND user_id = ?",
            (datetime.datetime.now().strftime('%Y-%m-%d'), message.from_user.id)
        )
        aim, cal, sex, age, imt, weight, height = cursor.fetchone()
        async with GigaChat(
            credentials='YzY3ZWQ3MmMtN2ZlOC00ZGQzLWE5OGEtOTBjMjdlMGZjMDJiOjQ4NTI4MDM1LTliNjgtNGIwOS1hZjk3LTFkNjU1MDk2NDM4Ng==',
            verify_ssl_certs=False) as giga:
              global plan_train, plan_pit
              plan_pit= giga.chat(
        f"–ü—Ä–∏–¥—É–º–∞–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è {sex},—á–µ–π —Ä–æ—Å—Ç —Ä–∞–≤–µ–Ω {height}, –≤–æ–∑—Ä–∞—Å—Ç —Ä–∞–≤–µ–Ω {age}, –∏–º—Ç —Ä–∞–≤–µ–Ω {imt} –∏ —Ü–µ–ª—å {aim}")
              plan_train = giga.chat(
           f"–ü—Ä–∏–¥—É–º–∞–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è {sex}, —á–µ–π —Ä–æ—Å—Ç —Ä–∞–≤–µ–Ω {height}, –≤–æ–∑—Ä–∞—Å—Ç —Ä–∞–≤–µ–Ω {age},  —á–µ–π –∏–º—Ç —Ä–∞–≤–µ–Ω {imt} , —á—å—è —Ü–µ–ª—å {aim} –∏ —á–µ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è {plan_pit.choices[0].message.content}")


              return plan_pit.choices[0].message.content, plan_train.choices[0].message.content
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {str(e)}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {e}"

@dp.message(F.text == '–í—Ö–æ–¥ –≤ –ø—Ä–æ–≥—Ä–∞–º—É')
async def ais(message: Message, state: FSMContext):
    await message.answer( text='–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –≤–≤–æ–¥–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Å–µ–≥–æ–¥–Ω—è —É–ø–æ—Ç—Ä–µ–±–∏–ª –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—à—ë–ª, –∞ –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ —Ç–≤–æ–∏–º –ë/–ñ/–£ –∑–∞ –¥–µ–Ω—å –∏ –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω—ã–º –∫–∞–ª–æ—Ä–∏—è–º',reply_markup=kb.main_menu
)

async def main():

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
